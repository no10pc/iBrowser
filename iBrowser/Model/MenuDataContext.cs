#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.261
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;


using System.IO;
using System.IO.IsolatedStorage;
using Microsoft.Phone.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq;
namespace iBrowser.Model
{

    public class DebugWriter : TextWriter
    {
        private const int DefaultBufferSize = 256;
        private System.Text.StringBuilder _buffer;

        public DebugWriter()
        {
            BufferSize = 256;
            _buffer = new System.Text.StringBuilder(BufferSize);
        }

        public int BufferSize
        {
            get;
            private set;
        }

        public override System.Text.Encoding Encoding
        {
            get { return System.Text.Encoding.UTF8; }
        }

        #region StreamWriter Overrides
        public override void Write(char value)
        {
            _buffer.Append(value);
            if (_buffer.Length >= BufferSize)
                Flush();
        }

        public override void WriteLine(string value)
        {
            Flush();

            using (var reader = new StringReader(value))
            {
                string line;
                while (null != (line = reader.ReadLine()))
                    System.Diagnostics.Debug.WriteLine(line);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
                Flush();
        }

        public override void Flush()
        {
            if (_buffer.Length > 0)
            {
                System.Diagnostics.Debug.WriteLine(_buffer);
                _buffer.Clear();
            }
        }
        #endregion
    }


    public partial class MenuDataContext : System.Data.Linq.DataContext
    {

        public bool CreateIfNotExists()
        {
            bool created = false;
            using (var db = new MenuDataContext(MenuDataContext.ConnectionString))
            {
                if (!db.DatabaseExists())
                {
                    string[] names = this.GetType().Assembly.GetManifestResourceNames();
                    string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
                    if (name != null)
                    {
                        using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
                        {
                            if (resourceStream != null)
                            {
                                using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
                                {
                                    using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
                                    {
                                        using (BinaryWriter writer = new BinaryWriter(fileStream))
                                        {
                                            long length = resourceStream.Length;
                                            byte[] buffer = new byte[32];
                                            int readCount = 0;
                                            using (BinaryReader reader = new BinaryReader(resourceStream))
                                            {
                                                // read file in chunks in order to reduce memory consumption and increase performance
                                                while (readCount < length)
                                                {
                                                    int actual = reader.Read(buffer, 0, buffer.Length);
                                                    readCount += actual;
                                                    writer.Write(buffer, 0, actual);
                                                }
                                            }
                                        }
                                    }
                                }
                                created = true;
                            }
                            else
                            {
                                db.CreateDatabase();
                                created = true;
                            }
                        }
                    }
                    else
                    {
                        db.CreateDatabase();
                        created = true;
                    }
                }
            }
            return created;
        }

        public bool LogDebug
        {
            set
            {
                if (value)
                {
                    this.Log = new DebugWriter();
                }
            }
        }

        public static string ConnectionString = "Data Source=isostore:/mymenus.sdf";

        public static string ConnectionStringReadOnly = "Data Source=appdata:/mymenus.sdf;File Mode=Read Only;";

        public static string FileName = "mymenus.sdf";

        public MenuDataContext(string connectionString)
            : base(connectionString)
        {
            OnCreated();
        }

        #region 可扩展性方法定义
        partial void OnCreated();
        partial void InsertScreen(Screen instance);
        partial void UpdateScreen(Screen instance);
        partial void DeleteScreen(Screen instance);
        partial void InsertSiteInfo(SiteInfo instance);
        partial void UpdateSiteInfo(SiteInfo instance);
        partial void DeleteSiteInfo(SiteInfo instance);
        #endregion

        public System.Data.Linq.Table<@__VERSION> @__VERSIONs
        {
            get
            {
                return this.GetTable<@__VERSION>();
            }
        }

        public System.Data.Linq.Table<Screen> Screens
        {
            get
            {
                return this.GetTable<Screen>();
            }
        }

        public System.Data.Linq.Table<SiteInfo> SiteInfos
        {
            get
            {
                return this.GetTable<SiteInfo>();
            }
        }

        public Table<quicklink> quicklink
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class @__VERSION
    {

        private int _SchemaVersion;

        private System.DateTime _DateUpdated;

        public @__VERSION()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SchemaVersion", DbType = "Int NOT NULL")]
        public int SchemaVersion
        {
            get
            {
                return this._SchemaVersion;
            }
            set
            {
                if ((this._SchemaVersion != value))
                {
                    this._SchemaVersion = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateUpdated", DbType = "DateTime NOT NULL")]
        public System.DateTime DateUpdated
        {
            get
            {
                return this._DateUpdated;
            }
            set
            {
                if ((this._DateUpdated != value))
                {
                    this._DateUpdated = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class Screen : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _ScreenName;

        private string _Desc;

        private EntitySet<SiteInfo> _SiteInfos;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnScreenNameChanging(string value);
        partial void OnScreenNameChanged();
        partial void OnDescChanging(string value);
        partial void OnDescChanged();
        #endregion

        public Screen()
        {
            this._SiteInfos = new EntitySet<SiteInfo>(new Action<SiteInfo>(this.attach_SiteInfos), new Action<SiteInfo>(this.detach_SiteInfos));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_picture", DbType = "NVarChar(4000)")]
        public string ScreenName
        {
            get
            {
                return this._ScreenName;
            }
            set
            {
                if ((this._ScreenName != value))
                {
                    this.OnScreenNameChanging(value);
                    this.SendPropertyChanging();
                    this._ScreenName = value;
                    this.SendPropertyChanged("Picture");
                    this.OnScreenNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_desc", DbType = "NVarChar(4000)")]
        public string Desc
        {
            get
            {
                return this._Desc;
            }
            set
            {
                if ((this._Desc != value))
                {
                    this.OnDescChanging(value);
                    this.SendPropertyChanging();
                    this._Desc = value;
                    this.SendPropertyChanged("Desc");
                    this.OnDescChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_SiteInfo_Screen", Storage = "_url", ThisKey = "Id", OtherKey = "_screenId", DeleteRule = "NO ACTION")]
        public EntitySet<SiteInfo> SiteInfos
        {
            get
            {
                return this._SiteInfos;
            }
            set
            {
                this._SiteInfos.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_SiteInfos(SiteInfo entity)
        {
            this.SendPropertyChanging();
            entity.Screen = this;
        }

        private void detach_SiteInfos(SiteInfo entity)
        {
            this.SendPropertyChanging();
            entity.Screen = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class quicklink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _picture;

        private string _desc;

        private string _url;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnScreenNameChanging(string value);
        partial void OnScreenNameChanged();
        partial void OnDescChanging(string value);
        partial void OnDescChanged();
        #endregion

        public quicklink()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_picture", DbType = "NVarChar(4000)")]
        public string Picture
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnScreenNameChanging(value);
                    this.SendPropertyChanging();
                    this._picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnScreenNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_desc", DbType = "NVarChar(4000)")]
        public string Desc
        {
            get
            {
                return this._desc;
            }
            set
            {
                if ((this._desc != value))
                {
                    this.OnDescChanging(value);
                    this.SendPropertyChanging();
                    this._desc = value;
                    this.SendPropertyChanged("Desc");
                    this.OnDescChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_SiteInfos(SiteInfo entity)
        {
            this.SendPropertyChanging();
            entity.quicklink = this;
        }

        private void detach_SiteInfos(SiteInfo entity)
        {
            this.SendPropertyChanging();
            entity.quicklink = null;
        }

        public string Url
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }

        private int _sortid;

        public int SortId
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class SiteInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int @__screenId;

        private int _Id;

        private string _SiteName;

        private string _SiteUrl;

        private EntityRef<Screen> _Screen;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void On_screenIdChanging(int value);
        partial void On_screenIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnSiteNameChanging(string value);
        partial void OnSiteNameChanged();
        partial void OnSiteUrlChanging(string value);
        partial void OnSiteUrlChanged();
        #endregion

        public SiteInfo()
        {
            this._Screen = default(EntityRef<Screen>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "__screenId", DbType = "Int NOT NULL")]
        public int _screenId
        {
            get
            {
                return this.@__screenId;
            }
            set
            {
                if ((this.@__screenId != value))
                {
                    if (this._Screen.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.On_screenIdChanging(value);
                    this.SendPropertyChanging();
                    this.@__screenId = value;
                    this.SendPropertyChanged("_screenId");
                    this.On_screenIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SiteName", DbType = "NVarChar(4000)")]
        public string SiteName
        {
            get
            {
                return this._SiteName;
            }
            set
            {
                if ((this._SiteName != value))
                {
                    this.OnSiteNameChanging(value);
                    this.SendPropertyChanging();
                    this._SiteName = value;
                    this.SendPropertyChanged("SiteName");
                    this.OnSiteNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SiteUrl", DbType = "NVarChar(4000)")]
        public string SiteUrl
        {
            get
            {
                return this._SiteUrl;
            }
            set
            {
                if ((this._SiteUrl != value))
                {
                    this.OnSiteUrlChanging(value);
                    this.SendPropertyChanging();
                    this._SiteUrl = value;
                    this.SendPropertyChanged("SiteUrl");
                    this.OnSiteUrlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_SiteInfo_Screen", Storage = "_Screen", ThisKey = "_screenId", OtherKey = "Id", IsForeignKey = true)]
        public Screen Screen
        {
            get
            {
                return this._Screen.Entity;
            }
            set
            {
                Screen previousValue = this._Screen.Entity;
                if (((previousValue != value)
                            || (this._Screen.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Screen.Entity = null;
                        previousValue.SiteInfos.Remove(this);
                    }
                    this._Screen.Entity = value;
                    if ((value != null))
                    {
                        value.SiteInfos.Add(this);
                        this.@__screenId = value.Id;
                    }
                    else
                    {
                        this.@__screenId = default(int);
                    }
                    this.SendPropertyChanged("quicklink");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
#pragma warning restore 1591
}